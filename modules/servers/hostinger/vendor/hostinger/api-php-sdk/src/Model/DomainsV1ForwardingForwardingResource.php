<?php
/** @noinspection PhpMissingFieldTypeInspection */
/** @noinspection PhpPluralMixedCanBeReplacedWithArrayInspection */
/** @noinspection PhpMissingParamTypeInspection */
/** @noinspection PhpMissingReturnTypeInspection */
/** @noinspection PhpUnnecessaryFullyQualifiedNameInspection */

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.99
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

class DomainsV1ForwardingForwardingResource 
{
    /**
     * @var string
     */
    public const REDIRECT_TYPE__301 = '301';
    /**
     * @var string
     */
    public const REDIRECT_TYPE__302 = '302';

    /**
     * @var string|null $domain
     */
    private ?string $domain = null;

    /**
     * @var string|null $redirectType
     */
    private ?string $redirectType;

    /**
     * @var string|null $redirectUrl
     */
    private ?string $redirectUrl;

    /**
     * @var \DateTime|null $createdAt
     */
    private ?\DateTime $createdAt;

    /**
     * @var \DateTime|null $updatedAt
     */
    private ?\DateTime $updatedAt = null;

    /**
    * @return string|null
    */
    public function getDomain(): ?string
    {
        return $this->domain;
    }

    /**
     * @param string|null $domain Domain name
     */
    public function setDomain(?string $domain): self
    {
        $this->domain = $domain;

        return $this;
    }
    /**
    * @return string|null
    */
    public function getRedirectType(): ?string
    {
        return $this->redirectType;
    }

    /**
     * @param string|null $redirectType Redirect type
     */
    public function setRedirectType(?string $redirectType): self
    {
        $this->redirectType = $redirectType;

        return $this;
    }
    /**
    * @return string|null
    */
    public function getRedirectUrl(): ?string
    {
        return $this->redirectUrl;
    }

    /**
     * @param string|null $redirectUrl URL domain is forwarded to
     */
    public function setRedirectUrl(?string $redirectUrl): self
    {
        $this->redirectUrl = $redirectUrl;

        return $this;
    }
    /**
    * @return \DateTime|null
    */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
     * @param \DateTime|null $createdAt createdAt
     */
    public function setCreatedAt(?\DateTime $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }
    /**
    * @return \DateTime|null
    */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->updatedAt;
    }

    /**
     * @param \DateTime|null $updatedAt updatedAt
     */
    public function setUpdatedAt(?\DateTime $updatedAt): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }
}

