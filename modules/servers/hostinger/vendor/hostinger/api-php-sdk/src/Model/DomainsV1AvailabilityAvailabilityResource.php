<?php
/** @noinspection PhpMissingFieldTypeInspection */
/** @noinspection PhpPluralMixedCanBeReplacedWithArrayInspection */
/** @noinspection PhpMissingParamTypeInspection */
/** @noinspection PhpMissingReturnTypeInspection */
/** @noinspection PhpUnnecessaryFullyQualifiedNameInspection */

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.99
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

class DomainsV1AvailabilityAvailabilityResource 
{

    /**
     * @var string|null $domain
     */
    private ?string $domain = null;

    /**
     * @var bool|null $isAvailable
     */
    private ?bool $isAvailable;

    /**
     * @var bool|null $isAlternative
     */
    private ?bool $isAlternative;

    /**
     * @var string|null $restriction
     */
    private ?string $restriction = null;

    /**
    * @return string|null
    */
    public function getDomain(): ?string
    {
        return $this->domain;
    }

    /**
     * @param string|null $domain Domain name, `null` when not claimed free domain
     */
    public function setDomain(?string $domain): self
    {
        $this->domain = $domain;

        return $this;
    }
    /**
    * @return bool|null
    */
    public function getIsAvailable(): ?bool
    {
        return $this->isAvailable;
    }

    /**
     * @param bool|null $isAvailable `true` if domain is available for registration
     */
    public function setIsAvailable(?bool $isAvailable): self
    {
        $this->isAvailable = $isAvailable;

        return $this;
    }
    /**
    * @return bool|null
    */
    public function getIsAlternative(): ?bool
    {
        return $this->isAlternative;
    }

    /**
     * @param bool|null $isAlternative `true` if domain is provided as an alternative
     */
    public function setIsAlternative(?bool $isAlternative): self
    {
        $this->isAlternative = $isAlternative;

        return $this;
    }
    /**
    * @return string|null
    */
    public function getRestriction(): ?string
    {
        return $this->restriction;
    }

    /**
     * @param string|null $restriction Special rules and/or restrictions applied for registering TLD
     */
    public function setRestriction(?string $restriction): self
    {
        $this->restriction = $restriction;

        return $this;
    }
}

