<?php
/** @noinspection PhpMissingFieldTypeInspection */
/** @noinspection PhpPluralMixedCanBeReplacedWithArrayInspection */
/** @noinspection PhpMissingParamTypeInspection */
/** @noinspection PhpMissingReturnTypeInspection */
/** @noinspection PhpUnnecessaryFullyQualifiedNameInspection */

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.99
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Model;

class VPSV1DockerManagerContainerPortResource 
{
    /**
     * @var string
     */
    public const TYPE_PUBLISHED = 'published';
    /**
     * @var string
     */
    public const TYPE_PUBLISHED_RANGE = 'published_range';
    /**
     * @var string
     */
    public const TYPE_EXPOSED = 'exposed';
    /**
     * @var string
     */
    public const TYPE_EXPOSED_RANGE = 'exposed_range';

    /**
     * @var string
     */
    public const PROTOCOL_TCP = 'tcp';
    /**
     * @var string
     */
    public const PROTOCOL_UDP = 'udp';

    /**
     * @var string|null $type
     */
    private ?string $type;

    /**
     * @var string|null $protocol
     */
    private ?string $protocol;

    /**
     * @var string|null $hostIp
     */
    private ?string $hostIp = null;

    /**
     * @var int|null $hostPort
     */
    private ?int $hostPort = null;

    /**
     * @var int|null $containerPort
     */
    private ?int $containerPort = null;

    /**
     * @var int|null $hostPortStart
     */
    private ?int $hostPortStart = null;

    /**
     * @var int|null $hostPortEnd
     */
    private ?int $hostPortEnd = null;

    /**
     * @var int|null $containerPortStart
     */
    private ?int $containerPortStart = null;

    /**
     * @var int|null $containerPortEnd
     */
    private ?int $containerPortEnd = null;

    /**
    * @return string|null
    */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * @param string|null $type Port mapping type - published (accessible from host), exposed (only internal), or range variants
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }
    /**
    * @return string|null
    */
    public function getProtocol(): ?string
    {
        return $this->protocol;
    }

    /**
     * @param string|null $protocol Network protocol used for communication
     */
    public function setProtocol(?string $protocol): self
    {
        $this->protocol = $protocol;

        return $this;
    }
    /**
    * @return string|null
    */
    public function getHostIp(): ?string
    {
        return $this->hostIp;
    }

    /**
     * @param string|null $hostIp IP address on host where port is bound (null for exposed-only ports)
     */
    public function setHostIp(?string $hostIp): self
    {
        $this->hostIp = $hostIp;

        return $this;
    }
    /**
    * @return int|null
    */
    public function getHostPort(): ?int
    {
        return $this->hostPort;
    }

    /**
     * @param int|null $hostPort Port number on host machine (null for exposed-only or range ports)
     */
    public function setHostPort(?int $hostPort): self
    {
        $this->hostPort = $hostPort;

        return $this;
    }
    /**
    * @return int|null
    */
    public function getContainerPort(): ?int
    {
        return $this->containerPort;
    }

    /**
     * @param int|null $containerPort Port number inside container (null for range ports)
     */
    public function setContainerPort(?int $containerPort): self
    {
        $this->containerPort = $containerPort;

        return $this;
    }
    /**
    * @return int|null
    */
    public function getHostPortStart(): ?int
    {
        return $this->hostPortStart;
    }

    /**
     * @param int|null $hostPortStart Starting port number in host port range (null for single ports)
     */
    public function setHostPortStart(?int $hostPortStart): self
    {
        $this->hostPortStart = $hostPortStart;

        return $this;
    }
    /**
    * @return int|null
    */
    public function getHostPortEnd(): ?int
    {
        return $this->hostPortEnd;
    }

    /**
     * @param int|null $hostPortEnd Ending port number in host port range (null for single ports)
     */
    public function setHostPortEnd(?int $hostPortEnd): self
    {
        $this->hostPortEnd = $hostPortEnd;

        return $this;
    }
    /**
    * @return int|null
    */
    public function getContainerPortStart(): ?int
    {
        return $this->containerPortStart;
    }

    /**
     * @param int|null $containerPortStart Starting port number in container port range (null for single ports)
     */
    public function setContainerPortStart(?int $containerPortStart): self
    {
        $this->containerPortStart = $containerPortStart;

        return $this;
    }
    /**
    * @return int|null
    */
    public function getContainerPortEnd(): ?int
    {
        return $this->containerPortEnd;
    }

    /**
     * @param int|null $containerPortEnd Ending port number in container port range (null for single ports)
     */
    public function setContainerPortEnd(?int $containerPortEnd): self
    {
        $this->containerPortEnd = $containerPortEnd;

        return $this;
    }
}

