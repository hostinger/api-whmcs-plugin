<?php
/** @noinspection PhpMissingReturnTypeInspection */
/** @noinspection PhpFullyQualifiedNameUsageInspection */

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.99
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Exception\ExceptionInterface;
use Symfony\Component\Serializer\Serializer;
use Hostinger\ApiException;
use Hostinger\Configuration;
use Hostinger\ObjectSerializer;

class DNSZoneApi
{
    protected ClientInterface $client;

    protected Configuration $config;

    protected Serializer $serializer;

    public function __construct(
        ?Configuration $config = null,
        ?ClientInterface $client = null,
    ) {
        $this->serializer = ObjectSerializer::getSerializer();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->client = $client ?: new Client([
            'base_uri' => $this->config->getHost(),
        ]);
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * @return \Hostinger\Model\CommonSuccessEmptyResource
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws ExceptionInterface
     */
    public function deleteDNSRecordsV1(string $domain, \Hostinger\Model\DNSV1ZoneDestroyRequest $dNSV1ZoneDestroyRequest)
    {
        $request = new Request(
            method: 'DELETE',
            uri: $this->buildResourcePath('/api/dns/v1/zones/{domain}', [
                'domain' => $domain
            ]),
            headers: $this->getHeaders(),
            body: $this->serializer->serialize($dNSV1ZoneDestroyRequest, JsonEncoder::FORMAT),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), '\Hostinger\Model\CommonSuccessEmptyResource', JsonEncoder::FORMAT);
    }

    /**
     * @return \Hostinger\Model\DNSV1ZoneRecordResource[]
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws ExceptionInterface
     */
    public function getDNSRecordsV1(string $domain)
    {
        $request = new Request(
            method: 'GET',
            uri: $this->buildResourcePath('/api/dns/v1/zones/{domain}', [
                'domain' => $domain
            ]),
            headers: $this->getHeaders(),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), '\Hostinger\Model\DNSV1ZoneRecordResource[]', JsonEncoder::FORMAT);
    }

    /**
     * @return \Hostinger\Model\CommonSuccessEmptyResource
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws ExceptionInterface
     */
    public function resetDNSRecordsV1(string $domain, \Hostinger\Model\DNSV1ZoneResetRequest $dNSV1ZoneResetRequest)
    {
        $request = new Request(
            method: 'POST',
            uri: $this->buildResourcePath('/api/dns/v1/zones/{domain}/reset', [
                'domain' => $domain
            ]),
            headers: $this->getHeaders(),
            body: $this->serializer->serialize($dNSV1ZoneResetRequest, JsonEncoder::FORMAT),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), '\Hostinger\Model\CommonSuccessEmptyResource', JsonEncoder::FORMAT);
    }

    /**
     * @return \Hostinger\Model\CommonSuccessEmptyResource
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws ExceptionInterface
     */
    public function updateDNSRecordsV1(string $domain, \Hostinger\Model\DNSV1ZoneUpdateRequest $dNSV1ZoneUpdateRequest)
    {
        $request = new Request(
            method: 'PUT',
            uri: $this->buildResourcePath('/api/dns/v1/zones/{domain}', [
                'domain' => $domain
            ]),
            headers: $this->getHeaders(),
            body: $this->serializer->serialize($dNSV1ZoneUpdateRequest, JsonEncoder::FORMAT),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), '\Hostinger\Model\CommonSuccessEmptyResource', JsonEncoder::FORMAT);
    }

    /**
     * @return \Hostinger\Model\CommonSuccessEmptyResource
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws ExceptionInterface
     */
    public function validateDNSRecordsV1(string $domain, \Hostinger\Model\DNSV1ZoneUpdateRequest $dNSV1ZoneUpdateRequest)
    {
        $request = new Request(
            method: 'POST',
            uri: $this->buildResourcePath('/api/dns/v1/zones/{domain}/validate', [
                'domain' => $domain
            ]),
            headers: $this->getHeaders(),
            body: $this->serializer->serialize($dNSV1ZoneUpdateRequest, JsonEncoder::FORMAT),
        );

        try {
            $response = $this->client->send($request, $this->createHttpClientOption());
        } catch (RequestException $e) {
            throw ApiException::fromRequestException($e);
        } catch (ConnectException $e) {
            throw ApiException::fromConnectException($e);
        }

        return $this->serializer->deserialize($response->getBody()->getContents(), '\Hostinger\Model\CommonSuccessEmptyResource', JsonEncoder::FORMAT);
    }

    /**
     * @param array<string, mixed> $values
     */
    private function buildResourcePath(string $path, array $values): string
    {
        foreach ($values as $key => $value) {
            if (is_array($value)) {
                $value = implode(',', $value);
            }

            $path = str_replace('{' . $key . '}', $value, $path);
        }

        return $path;
    }

    /**
     * @return array<string, string>
     */
    private function getHeaders(): array
    {
        return [
            'Authorization' => 'Bearer ' . $this->config->getAccessToken(),
            'Content-Type' => 'application/json',
            'User-Agent' => $this->config->getUserAgent(),
        ];
    }

    /**
     * @return array<string, string>
     */
    private function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
