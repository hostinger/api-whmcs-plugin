<?php

/**
 * Hostinger API PHP SDK
 *
 * API Version: 0.0.99
 * @url https://github.com/hostinger/api-php-sdk
 *
 * NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
 * If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
 */

namespace Hostinger;

use Hostinger\Normalizers\ArrayToObjectNormalizer;
use Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor;
use Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor;
use Symfony\Component\PropertyInfo\PropertyInfoExtractor;
use Symfony\Component\Serializer\Encoder\JsonEncode;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter;
use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
use Symfony\Component\Serializer\Normalizer\DateTimeNormalizer;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Normalizer\AbstractNormalizer;
use Symfony\Component\Serializer\Normalizer\AbstractObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

class ObjectSerializer
{
    private static ?Serializer $serializer = null;

    private function __construct()
    {
    }

    public static function getSerializer(): Serializer
    {
        if (self::$serializer === null) {
            self::$serializer = self::createSerializer();
        }

        return self::$serializer;
    }

    private static function createSerializer(): Serializer
    {
        // Setup property info extractors for better type handling
        $phpDocExtractor = new PhpDocExtractor();
        $reflectionExtractor = new ReflectionExtractor();

        $propertyInfoExtractor = new PropertyInfoExtractor(
            [$reflectionExtractor],
            [$phpDocExtractor, $reflectionExtractor],
            [$phpDocExtractor],
            [$reflectionExtractor],
            [$reflectionExtractor]
        );

        // Configure normalizers
        $normalizers = [
            new ArrayToObjectNormalizer(),
            new DateTimeNormalizer([
                DateTimeNormalizer::FORMAT_KEY => \DateTime::RFC3339,
                DateTimeNormalizer::TIMEZONE_KEY => 'UTC',
            ]),
            new ArrayDenormalizer(),
            new ObjectNormalizer(
                null,
                new CamelCaseToSnakeCaseNameConverter(),
                null,
                $propertyInfoExtractor,
                null,
                null,
                [
                    AbstractNormalizer::CIRCULAR_REFERENCE_HANDLER => function ($object) {
                        return $object->getId() ?? spl_object_hash($object);
                    },
                    AbstractObjectNormalizer::SKIP_NULL_VALUES => true,
                    AbstractObjectNormalizer::PRESERVE_EMPTY_OBJECTS => true,
                ]
            ),
        ];

        // Configure encoders
        $encoders = [
            new JsonEncoder(defaultContext: [
                JsonEncode::OPTIONS => JSON_UNESCAPED_SLASHES | JSON_PRESERVE_ZERO_FRACTION,
            ]),
        ];

        return new Serializer($normalizers, $encoders);
    }
}